<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Reverse Engineering : An Introduction</title>
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
        <link href="../css/styles.css" rel="stylesheet" />
        <link href="../js/scripts.js">
        <script src="https://use.fontawesome.com/releases/v5.15.1/js/all.js" crossorigin="anonymous"></script>
       <style>
            header h1
            {
                margin-top:2.5rem;
                margin-bottom: 2rem;
                font-weight: 800;
            }
            header img
            {
                margin-left: auto;
                margin-right: auto;
                display: flex;
                margin-bottom: 2rem;
            }
            div h3
            {
                background-color: #343a40;
                color:white;
                border-radius: 10px;
                padding: 3px 0px 5px 7px;
            }
            @media (max-width: 480px)
            {
                body
                {
                    margin-left:0;

                }
                
            }
            @media (max-width: 768px) {
                body
                {
                    margin-left:0px;
                }
            }
        </style>
    </head>
    <body>
        <%- include("../../partials/header.ejs") %>
        <header class="container">
            <h1>Reverse Engineering : An Introduction</h1>
            <img src="https://miro.medium.com/max/1000/1*yHcx42CBNd1xn8hYBAoS2w.jpeg" alt="Reverse Enginnering" class="img-fluid">
        </header>
        <div class="container">
            <h3 class="display-5">Definition</h3>
            <p>At the basic level, Reverse Engineering is looking at things from outside in. It is like having a finalized piece with you like a software system or a hardware product that you want to analyze it to trace it back to its roots.</p>
            <h2>Why would you Reverse Engineer things?</h2>
            <p>There could be various reasons behind it. Maybe for your own financial gains , like your opponent launched a product into the market and you want to see how they built it. Or maybe because you want to fix some bugs in your product,optimize its performance ,audit its security or prevent copyright infringement.</p>
            <p><mark>Example : You might have come across cracked versions of some kind of game,video editing software,etc. 
                <br> 
                 Ever wondered how this is possible? Well,this is an application of reverse engineering.</mark></p>
            </div>
        <div class="container">
            <h3>So Lets Begin!!</h3>
            <p>Programs/Software are written in high level language which are then converted to machine level language so that the machine can understand it and implement the instructions (as specified in the program/software)</p>
            <p>The thing with machine level code is that we can’t understand it EASILY. It might end up banging your head against a wall before you understand what it is trying to do.</p>
            <p><em>So, we came up with assembly level language that makes it a lot easier than to read machine level code. Assembly level code deals in mnemonics.<br> <mark>Like a = a+b in python could be written as add a,b in assembly level language.</mark>
            </em></p>
        </div>
        <div class="container">
            <h3>Types of Syntax:</h3>
            <p>There are 2 types of syntax through which you can read the assembly code generated by your code</p>
            <ol>
                <li><strong>AT&T Syntax</strong></li>
                <li><strong>Intel Syntax </strong></li>
            </ol>
            <p><mark>I personally prefer AT&T syntax but its totally up-to you which one you choose or prefer.I’ll be listing out the differences between the two.</mark></p>
            <ol>
                <li> The source , destination operands are written in the opposite order .</li>
                <ul>
                    <li>AT&T : &lt;instruction/mnemonic&gt; &lt;source operand&gt; &lt;destination operand&gt;&lt;destination&gt;</li>
                    <li>Intel : &lt;instruction/mnemonic&gt; &lt;destination operand&gt; &lt;source operand&gt;</li>
                </ul>
                <img src="../../images/diff.png" alt="Difference between Syntax" style="display: flex; margin: 10px auto 10px auto;">
                <li> In AT&T Syntax , a percentage sign (%) is prepended to the register names and a dollar sign is prepended to the constants.</li>
                <ul>
                    <li>%rax (represents a register)</li>
                    <li>$0x3 (represents 3.) [Constants are represented in hex format]</li>
                </ul>
                <li> You’ll often see a character appended with an instruction.Which represents the size of the data involved.</li>
            </ol>
        </div>
        <div class="container">
            <h3>Memory</h3>
            
            <p>The basic unit of memory is a bit. 8 Bits make up a byte. Combination of bytes (depending upon the architecture) make up a word.
                <br> Memory is represented in the form of words. A word a ordered set of bytes or bits that can be used to store , transmit or operate upon in computer.</p>
            <ul>
                <li><strong>q</strong> : Stands for a quad word (64 bits)</li>
                <li><strong>s</strong> : Stands for single precision (32 bits)</li>
                <li><strong>l</strong> : Stands for double precision/double word(64 bits)</li>
                <li><strong>b</strong> : Stands for byte (8 bits)</li>
                <li><strong>w</strong> : Stands for word (16 bits)</li>
            </ul>
        </div>
        <div class="container" style="margin-bottom: 1rem;">
            <h5>Don't stop here.Learn more about it <a href="/reverseEngineering/intro2">here</a>.</h5>
        </div>
        <iframe src="https://www.youtube.com/embed/VroEiMOJPm8" frameborder="0" style="display: flex;margin: auto;"width="520" height="315"></iframe>
    </body>
</html>